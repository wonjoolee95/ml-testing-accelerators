# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"apiVersion": "batch/v1"
"kind": "CronJob"
"metadata":
  "labels":
    "accelerator": "v4-32"
    "benchmarkId": "flax.latest-vit-imagenette-conv-v4-32-1vm"
    "frameworkVersion": "flax.latest"
    "mode": "conv"
    "model": "vit-imagenette"
  "name": "flax.latest-vit-imagenette-conv-v4-32-1vm"
  "namespace": "automated"
"spec":
  "concurrencyPolicy": "Forbid"
  "jobTemplate":
    "metadata":
      "annotations":
        "ml-testing-accelerators/gcs-subdir": "flax.latest/vit-imagenette/conv/v4-32"
        "ml-testing-accelerators/metric-config": |
          {
            "sources": [
              {
                "tensorboard": {
                  "aggregate_assertions": [
                    {
                      "assertion": {
                        "fixed_value": {
                          "comparison": "GREATER",
                          "value": 0.98
                        },
                        "inclusive_bounds": false,
                        "wait_for_n_data_points": 0
                      },
                      "strategy": "FINAL",
                      "tag": "eval_accuracy"
                    }
                  ],
                  "exclude_tags": [
                    "_hparams_/session_start_info"
                  ],
                  "include_tags": [
                    {
                      "strategies": [
                        "FINAL"
                      ],
                      "tag_pattern": "*"
                    }
                  ],
                  "merge_runs": true
                }
              }
            ]
          }
      "labels":
        "accelerator": "v4-32"
        "benchmarkId": "flax.latest-vit-imagenette-conv-v4-32-1vm"
        "frameworkVersion": "flax.latest"
        "mode": "conv"
        "model": "vit-imagenette"
    "spec":
      "activeDeadlineSeconds": 86400
      "backoffLimit": 0
      "template":
        "metadata":
          "annotations":
            "reserved.cloud-tpus.google.com": "false"
            "tf-version.cloud-tpus.google.com": "tpu-ubuntu2204-base"
        "spec":
          "activeDeadlineSeconds": 36000
          "containers":
          - "args":
            - "bash"
            - "-c"
            - |
              set -x
              set -u
              
              cat > testsetup.sh << 'TEST_SCRIPT_EOF'
              set -x
              set -u
              set -e
              
              # .bash_logout sometimes causes a spurious bad exit code, remove it.
              rm .bash_logout
              
              pip install --upgrade pip
              git clone https://github.com/huggingface/transformers.git
              cd transformers && pip install .
              pip install -r examples/flax/_tests_requirements.txt
              pip install --upgrade huggingface-hub urllib3 zipp
              
              pip install tensorflow
              pip install jax[tpu] -f https://storage.googleapis.com/jax-releases/libtpu_releases.html
              
              pip install -r examples/flax/vision/requirements.txt
              python3 -c 'import flax; print("flax version:", flax.__version__)'
              num_devices=`python3 -c "import jax; print(jax.device_count())"`
              if [ "$num_devices" = "1" ]; then
                echo "No TPU devices detected"
                exit 1
              fi
              
              
              wget https://s3.amazonaws.com/fast-ai-imageclas/imagenette2.tgz
              tar -xvzf imagenette2.tgz
              
              export GCS_BUCKET=$(MODEL_DIR)
              python3 examples/flax/vision/run_image_classification.py \
                --output_dir './vit-imagenette' \
                --train_dir='imagenette2/train' \
                --validation_dir='imagenette2/val' \
                --learning_rate 1e-3 \
                --preprocessing_num_workers 32 \
                --model_name_or_path google/vit-base-patch16-224-in21k --num_train_epochs 30 --per_device_train_batch_size 64 --per_device_eval_batch_size 64
              
              # Ignore CommandException for the rest workers in TPU pod
              gsutil -m cp -r ./vit-imagenette $(MODEL_DIR) || exit 0
              
              
              TEST_SCRIPT_EOF
              
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) \
              --zone=$(cat /scripts/zone) \
              --ssh-key-file=/scripts/id_rsa \
              --strict-host-key-checking=no \
              --internal-ip \
              --worker=all \
              --command "$(cat testsetup.sh)"
              
              exit_code=$?
              bash /scripts/cleanup.sh
              exit $exit_code
            "env":
            - "name": "POD_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.name"
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            - "name": "POD_NAMESPACE"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.namespace"
            - "name": "JOB_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.labels['job-name']"
            - "name": "MODEL_DIR"
              "value": "$(OUTPUT_BUCKET)/flax.latest/vit-imagenette/conv/v4-32/$(JOB_NAME)"
            - "name": "KUBE_GOOGLE_CLOUD_TPU_ENDPOINTS"
              "value": "tpu-$(POD_UID)"
            - "name": "LOCAL_OUTPUT_DIR"
              "value": "/tmp/model_dir"
            "envFrom":
            - "configMapRef":
                "name": "gcs-buckets"
            "image": "google/cloud-sdk"
            "imagePullPolicy": "Always"
            "lifecycle":
              "preStop":
                "exec":
                  "command":
                  - "bash"
                  - "/scripts/cleanup.sh"
            "name": "train"
            "resources":
              "limits":
                "tpu.googleapis.com/v4": 32
              "requests":
                "cpu": 1
                "memory": "2Gi"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
              "readOnly": false
          "initContainers":
          - "command":
            - "/bin/bash"
            - "-c"
            - |
              set -u
              set -e
              set -x
              
              project=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")
              zone=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | awk -F'/' '{print $4}')
              tpu_name=tpu-${POD_UID}
              ssh-keygen -t rsa -f /scripts/id_rsa -q -N ""
              
              echo "
              gcloud alpha compute tpus tpu-vm delete -q --async ${tpu_name} --zone=${zone}
              sleep 60
              " > /scripts/cleanup.sh
              
              echo "xl-ml-test:$(cat /scripts/id_rsa.pub)" > ssh-keys.txt
              echo 'echo Running startup script' > startup-script.txt
              
              # Retry every 30 seconds for up to 10 minutes
              start_time="$(date -u +%s)"
              for i in {1..20}; do
                set +e
                gcloud alpha compute tpus tpu-vm create ${tpu_name} \
                  --accelerator-type='v4-32' \
                  --version='tpu-ubuntu2204-base'  \
                  --metadata-from-file='ssh-keys=ssh-keys.txt,startup-script=startup-script.txt' \
                  --labels='test-name=flax-latest-vit-imagenette-conv-v4-32-1vm' \
                  --zone=${zone}
              
                exit_code=$?
                set -e
              
                current_time="$(date -u +%s)"
                elapsed_seconds=$(($current_time-$start_time))
                # Break if command passed or 10-minute limit reached
                test $exit_code = 0 && break
                test $elapsed_seconds -gt 600 && break
                sleep 30
              done
              
              if [ $exit_code -ne 0 ]; then
                exit $exit_code
              fi
              
              echo ${zone} > /scripts/zone
              echo ${tpu_name} > /scripts/tpu_name
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --format="value(networkEndpoints[0].ipAddress)" > /scripts/tpu_ip
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --flatten="networkEndpoints[]" --format="csv[no-heading](networkEndpoints.ipAddress)" > /scripts/all_tpu_ips
              
              sleep 60
              
            "env":
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            "image": "google/cloud-sdk"
            "name": "create-tpu"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
          "nodeSelector":
            "tpu-available": "true"
          "priorityClassName": "tpu-pod"
          "restartPolicy": "Never"
          "volumes":
          - "emptyDir":
              "medium": "Memory"
            "name": "scripts"
  "schedule": "0 6 * * 0,5"
  "successfulJobsHistoryLimit": 1