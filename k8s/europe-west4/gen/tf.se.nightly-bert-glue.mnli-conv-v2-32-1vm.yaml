# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"apiVersion": "batch/v1"
"kind": "CronJob"
"metadata":
  "labels":
    "accelerator": "v2-32"
    "benchmarkId": "tf.se.nightly-bert-glue.mnli-conv-v2-32-1vm"
    "frameworkVersion": "tf.se.nightly"
    "mode": "conv"
    "model": "bert-glue.mnli"
  "name": "tf.se.nightly-bert-glue.mnli-conv-v2-32-1vm"
  "namespace": "automated"
"spec":
  "concurrencyPolicy": "Forbid"
  "jobTemplate":
    "metadata":
      "annotations":
        "ml-testing-accelerators/gcs-subdir": "tf.se.nightly/bert-glue.mnli/conv/v2-32"
        "ml-testing-accelerators/metric-config": |
          {
            "sources": [
              {
                "tensorboard": {
                  "aggregate_assertions": [
                    {
                      "assertion": {
                        "inclusive_bounds": true,
                        "std_devs_from_mean": {
                          "comparison": "GREATER",
                          "std_devs": 2
                        },
                        "wait_for_n_data_points": 0
                      },
                      "strategy": "AVERAGE",
                      "tag": "examples_per_second"
                    }
                  ],
                  "exclude_tags": [
          
                  ],
                  "include_tags": [
                    {
                      "strategies": [
                        "FINAL"
                      ],
                      "tag_pattern": "*"
                    }
                  ],
                  "merge_runs": false
                }
              }
            ]
          }
      "labels":
        "accelerator": "v2-32"
        "benchmarkId": "tf.se.nightly-bert-glue.mnli-conv-v2-32-1vm"
        "frameworkVersion": "tf.se.nightly"
        "mode": "conv"
        "model": "bert-glue.mnli"
    "spec":
      "activeDeadlineSeconds": 86400
      "backoffLimit": 0
      "template":
        "metadata":
          "annotations":
            "reserved.cloud-tpus.google.com": "false"
            "tf-version.cloud-tpus.google.com": "v2-nightly-pod"
        "spec":
          "activeDeadlineSeconds": 36000
          "containers":
          - "args": null
            "command":
            - "bash"
            - "-c"
            - |
              set -x
              set -u
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) --zone=$(cat /scripts/zone) --ssh-key-file=/scripts/id_rsa --strict-host-key-checking=no --internal-ip --command \
                'pip install -r /usr/share/tpu/models/official/requirements.txt'
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) --zone=$(cat /scripts/zone) --ssh-key-file=/scripts/id_rsa --strict-host-key-checking=no --internal-ip --command \
                'pip install tensorflow-recommenders --no-deps'
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) --zone=$(cat /scripts/zone) --ssh-key-file=/scripts/id_rsa --strict-host-key-checking=no --internal-ip --command \
                'cd /usr/share/tpu/models; PYTHONPATH=${PWD} TPU_LOAD_LIBRARY=0 ''"python3" "official/nlp/train.py" "--tpu=$(KUBE_GOOGLE_CLOUD_TPU_ENDPOINTS)" "--experiment=bert/sentence_prediction_text" "--mode=train_and_eval" "--model_dir=$(MODEL_DIR)" "--params_override=\"runtime\":
                \"distribution_strategy\": \"tpu\"
              \"task\":
                \"init_checkpoint\": \"$(TF_NLP_BERT_DIR)/uncased_L-12_H-768_A-12/bert_model.ckpt\"
                \"train_data\":
                  \"input_path\": \"\"
                  \"tfds_data_dir\": \"$(TFDS_DIR)\"
                  \"vocab_file\": \"$(TF_NLP_BERT_DIR)/uncased_L-12_H-768_A-12/vocab.txt\"
                \"validation_data\":
                  \"input_path\": \"\"
                  \"tfds_data_dir\": \"$(TFDS_DIR)\"
                  \"vocab_file\": \"$(TF_NLP_BERT_DIR)/uncased_L-12_H-768_A-12/vocab.txt\"
              " "--config_file=official/nlp/configs/experiments/glue_mnli_text.yaml"'
              exit_code=$?
              bash /scripts/cleanup.sh
              exit $exit_code
            "env":
            - "name": "POD_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.name"
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            - "name": "POD_NAMESPACE"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.namespace"
            - "name": "JOB_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.labels['job-name']"
            - "name": "MODEL_DIR"
              "value": "$(OUTPUT_BUCKET)/tf.se.nightly/bert-glue.mnli/conv/v2-32/$(JOB_NAME)"
            - "name": "KUBE_GOOGLE_CLOUD_TPU_ENDPOINTS"
              "value": "tpu-$(POD_UID)"
            - "name": "LOCAL_OUTPUT_DIR"
              "value": "/tmp/model_dir"
            - "name": "TF_ENABLE_LEGACY_FILESYSTEM"
              "value": "1"
            "envFrom":
            - "configMapRef":
                "name": "gcs-buckets"
            "image": "google/cloud-sdk"
            "imagePullPolicy": "Always"
            "lifecycle":
              "preStop":
                "exec":
                  "command":
                  - "bash"
                  - "/scripts/cleanup.sh"
            "name": "train"
            "resources":
              "limits":
                "tpu.googleapis.com/v2": 32
              "requests":
                "cpu": 1
                "memory": "2Gi"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
              "readOnly": false
            - "mountPath": "/dev/shm"
              "name": "dshm"
              "readOnly": false
          "initContainers":
          - "command":
            - "/bin/bash"
            - "-c"
            - |
              set -u
              set -e
              set -x
              
              project=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")
              zone=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | awk -F'/' '{print $4}')
              tpu_name=tpu-${POD_UID}
              ssh-keygen -t rsa -f /scripts/id_rsa -q -N ""
              echo "
                gcloud alpha compute tpus tpu-vm delete -q ${tpu_name} --zone=${zone}
              " > /scripts/cleanup.sh
              
              curl -X POST \
                -H "Authorization: Bearer $(gcloud auth print-access-token)" \
                -H "Content-Type: application/json" \
                -d "{
                  accelerator_type: 'v2-32',
                  runtime_version: 'v2-nightly-pod',
                  network_config: {enable_external_ips: true},
                  labels: {test_name: 'tf-se-nightly-bert-glue-mnli-conv-v2-32-1vm' },
                  boot_disk: {source_image: 'projects/cloud-tpu-v2-images-dev/global/images/family/tpu-vm-tf-nightly'},
                  metadata: {
                    'ssh-keys': 'xl-ml-test:$(cat /scripts/id_rsa.pub)',
                    'startup-script': 'echo Running startup script'
                  }
              }" https://tpu.googleapis.com/v2alpha1/projects/${project}/locations/${zone}/nodes?node_id=${tpu_name}
              echo "Waiting for TPU Pod ${tpu_name} to become ready..."
              timeout 10m bash -c -- "
              while [[ \${health:-NONE} != "HEALTHY" ]];
                do sleep 60 && \
                health=\$(gcloud \
                  --project=${project} \
                  compute \
                  tpus \
                  describe \
                  ${tpu_name} \
                  --zone=${zone} \
                  --format='value(health)') && \
                echo 'Waiting for ready TPU (current health \${health:-NONE})...';
              done
              "
              echo ${zone} > /scripts/zone
              echo ${tpu_name} > /scripts/tpu_name
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --format="value(networkEndpoints[0].ipAddress)" > /scripts/tpu_ip
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --flatten="networkEndpoints[]" --format="csv[no-heading](networkEndpoints.ipAddress)" > /scripts/all_tpu_ips
              sleep 60
              
              softwareVersion='v2-nightly-pod'
              
              gcloud alpha compute tpus tpu-vm ssh ${tpu_name}  --zone=${zone} --project=${project}  --internal-ip --ssh-key-file=/scripts/id_rsa --worker=all --command "echo 'WRAPT_DISABLE_EXTENSIONS=true' | sudo tee -a /etc/environment"
              if [[ ${softwareVersion: -3} == "pod" ]]; then
                 gcloud alpha compute tpus tpu-vm ssh ${tpu_name}  --zone=${zone} --project=${project}  --internal-ip --ssh-key-file=/scripts/id_rsa --worker=all --command "sudo sed -i 's/TF_DOCKER_URL=.*/TF_DOCKER_URL=gcr.io\/cloud-tpu-v2-images-dev\/grpc_tpu_worker:se-nightly\"/' /etc/systemd/system/tpu-runtime.service"
                 gcloud alpha compute tpus tpu-vm ssh ${tpu_name}  --zone=${zone} --project=${project}  --internal-ip --ssh-key-file=/scripts/id_rsa --worker=all --command "sudo systemctl daemon-reload && sudo systemctl restart tpu-runtime"
              else
                 gcloud alpha compute tpus tpu-vm ssh ${tpu_name} --zone=${zone} --project=${project}  --internal-ip --ssh-key-file=/scripts/id_rsa --command 'sudo usermod -a -G docker ${USER} && gcloud auth configure-docker --quiet'
                 gcloud alpha compute tpus tpu-vm ssh ${tpu_name}  --zone=${zone} --project=${project}  --internal-ip --ssh-key-file=/scripts/id_rsa --worker=all --command 'LIBTPU_DOCKER_IMAGE_PATH=gcr.io/cloud-tpu-v2-images-dev/libtpu:nightly && docker pull "${LIBTPU_DOCKER_IMAGE_PATH}" && docker create --name libtpu "${LIBTPU_DOCKER_IMAGE_PATH}" "/bin/bash" && sudo docker cp libtpu:libtpu.so /lib/libtpu.so'
              fi
              
            "env":
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            "image": "google/cloud-sdk"
            "name": "create-tpu"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
          - "command": null
            "image": "google/cloud-sdk"
            "name": "tpu-version"
          "nodeSelector":
            "tpu-available": "true"
          "priorityClassName": "tpu-pod"
          "restartPolicy": "Never"
          "volumes":
          - "emptyDir":
              "medium": "Memory"
            "name": "scripts"
          - "emptyDir":
              "medium": "Memory"
            "name": "dshm"
  "schedule": "0 5 * * 0,2,4"
  "successfulJobsHistoryLimit": 1
  "suspend": false